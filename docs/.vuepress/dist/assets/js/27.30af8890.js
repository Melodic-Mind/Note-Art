(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{270:function(t,e,a){"use strict";a.r(e);var s=a(38),r=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"musicfunctions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#musicfunctions","aria-hidden":"true"}},[t._v("#")]),t._v(" MusicFunctions")]),t._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),a("dl",[a("dt",[a("a",{attrs:{href:"#pitchClassesToNotes"}},[t._v("pitchClassesToNotes({pitchClasses}, octave)")]),t._v(" ⇒ "),a("code",[t._v("Array")])]),t._v(" "),a("dd",[a("p",[t._v("Returns an array of notes with a specific octave.")])]),t._v(" "),a("dt",[a("a",{attrs:{href:"#toPianoChordNotes"}},[t._v("toPianoChordNotes({pitchClasses}, octave, inversion)")]),t._v(" ⇒ "),a("code",[t._v("Array")])]),t._v(" "),a("dd",[a("p",[t._v("Returns an array of notes that represent chord played on a piano in a certain octave.")])]),t._v(" "),a("dt",[a("a",{attrs:{href:"#calculateInterval"}},[t._v("calculateInterval(pitchClass1, pitchClass2)")]),t._v(" ⇒ "),a("code",[t._v("Number")])]),t._v(" "),a("dd",[a("p",[t._v("Calculate the pure interval between 2 pitch classes.")])]),t._v(" "),a("dt",[a("a",{attrs:{href:"#noteToObject"}},[t._v("noteToObject(pitch)")]),t._v(" ⇒ "),a("code",[t._v("Object")])]),t._v(" "),a("dd",[a("p",[t._v("Turns a note into an object with pitch class and octave.")])]),t._v(" "),a("dt",[a("a",{attrs:{href:"#isRest"}},[t._v("isRest(note)")]),t._v(" ⇒ "),a("code",[t._v("boolean")])]),t._v(" "),a("dd",[a("p",[t._v("Returns true if a note is a rest, else false.")])]),t._v(" "),a("dt",[a("a",{attrs:{href:"#transposeRawNote"}},[t._v("transposeRawNote(note, interval)")]),t._v(" ⇒ "),a("code",[t._v("string")]),t._v(" | "),a("code",[t._v("*")])]),t._v(" "),a("dd",[a("p",[t._v("Transpose a raw note by interval.")])]),t._v(" "),a("dt",[a("a",{attrs:{href:"#notesInRange"}},[t._v("notesInRange(base, range)")])]),t._v(" "),a("dd",[a("p",[t._v("Returns an object where the keys are raw notes and their value is an instance of that note.")])])]),t._v(" "),a("p",[a("a",{attrs:{name:"pitchClassesToNotes"}})]),t._v(" "),a("h2",{attrs:{id:"pitchclassestonotes-pitchclasses-octave-⇒-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pitchclassestonotes-pitchclasses-octave-⇒-array","aria-hidden":"true"}},[t._v("#")]),t._v(" pitchClassesToNotes({pitchClasses}, octave) ⇒ "),a("code",[t._v("Array")])]),t._v(" "),a("p",[t._v("Returns an array of notes with a specific octave.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("{pitchClasses}")]),t._v(" "),a("td",[a("code",[t._v("Array")])]),t._v(" "),a("td",[t._v("Array of pitch classes.")])]),t._v(" "),a("tr",[a("td",[t._v("octave")]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[t._v("Octave to assign to notes..")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"toPianoChordNotes"}})]),t._v(" "),a("h2",{attrs:{id:"topianochordnotes-pitchclasses-octave-inversion-⇒-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#topianochordnotes-pitchclasses-octave-inversion-⇒-array","aria-hidden":"true"}},[t._v("#")]),t._v(" toPianoChordNotes({pitchClasses}, octave, inversion) ⇒ "),a("code",[t._v("Array")])]),t._v(" "),a("p",[t._v("Returns an array of notes that represent chord played on a piano in a certain octave.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("{pitchClasses}")]),t._v(" "),a("td",[a("code",[t._v("Array")])]),t._v(" "),a("td",[t._v("Array of pitch classes.")])]),t._v(" "),a("tr",[a("td",[t._v("octave")]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[t._v("Octave for the chord root.")])]),t._v(" "),a("tr",[a("td",[t._v("inversion")]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[t._v("Whhether to invert the chord. 0 - root position, 1 - 1st inversion, 2 - 2nd inversion,     etc...")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"calculateInterval"}})]),t._v(" "),a("h2",{attrs:{id:"calculateinterval-pitchclass1-pitchclass2-⇒-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#calculateinterval-pitchclass1-pitchclass2-⇒-number","aria-hidden":"true"}},[t._v("#")]),t._v(" calculateInterval(pitchClass1, pitchClass2) ⇒ "),a("code",[t._v("Number")])]),t._v(" "),a("p",[t._v("Calculate the pure interval between 2 pitch classes.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("pitchClass1")]),t._v(" "),a("td",[a("code",[t._v("PitchClass")])]),t._v(" "),a("td",[t._v("first note")])]),t._v(" "),a("tr",[a("td",[t._v("pitchClass2")]),t._v(" "),a("td",[a("code",[t._v("PitchClass")])]),t._v(" "),a("td",[t._v("second note")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"noteToObject"}})]),t._v(" "),a("h2",{attrs:{id:"notetoobject-pitch-⇒-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notetoobject-pitch-⇒-object","aria-hidden":"true"}},[t._v("#")]),t._v(" noteToObject(pitch) ⇒ "),a("code",[t._v("Object")])]),t._v(" "),a("p",[t._v("Turns a note into an object with pitch class and octave.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("pitch")]),t._v(" "),a("td",[a("code",[t._v("String")])]),t._v(" "),a("td",[t._v("Pitch as a string, e.g Ab3")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"isRest"}})]),t._v(" "),a("h2",{attrs:{id:"isrest-note-⇒-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isrest-note-⇒-boolean","aria-hidden":"true"}},[t._v("#")]),t._v(" isRest(note) ⇒ "),a("code",[t._v("boolean")])]),t._v(" "),a("p",[t._v("Returns true if a note is a rest, else false.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("note")]),t._v(" "),a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[t._v("Raw note.")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"transposeRawNote"}})]),t._v(" "),a("h2",{attrs:{id:"transposerawnote-note-interval-⇒-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transposerawnote-note-interval-⇒-string","aria-hidden":"true"}},[t._v("#")]),t._v(" transposeRawNote(note, interval) ⇒ "),a("code",[t._v("string")]),t._v(" | "),a("code",[t._v("*")])]),t._v(" "),a("p",[t._v("Transpose a raw note by interval.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("note")]),t._v(" "),a("td",[a("code",[t._v("string")])]),t._v(" "),a("td",[t._v("Raw note.")])]),t._v(" "),a("tr",[a("td",[t._v("interval")]),t._v(" "),a("td",[a("code",[t._v("number")])]),t._v(" "),a("td",[t._v("Interval to transpose by.")])])])]),t._v(" "),a("p",[a("a",{attrs:{name:"notesInRange"}})]),t._v(" "),a("h2",{attrs:{id:"notesinrange-base-range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notesinrange-base-range","aria-hidden":"true"}},[t._v("#")]),t._v(" notesInRange(base, range)")]),t._v(" "),a("p",[t._v("Returns an object where the keys are raw notes and their value is an instance of that note.")]),t._v(" "),a("p",[a("strong",[t._v("Kind")]),t._v(": global function")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Param")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("base")])]),t._v(" "),a("tr",[a("td",[t._v("range")])])])])])},[],!1,null,null,null);e.default=r.exports}}]);